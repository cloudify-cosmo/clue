########
# Copyright (c) 2016 GigaSpaces Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
############

tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3/types.yaml

inputs:
  repos:
    description: >
      Based on this dict, before the local workflow environment
      is initialized, several node templates get generated to reflect
      the repositories and python packages specified in this input.
    default:
      core:
        cloudify-dsl-parser: {}
        cloudify-rest-client: {}
        cloudify-amqp-influxdb: {}
        cloudify-plugins-common:
          python:
            dependencies:
            - cloudify-rest-client
        cloudify-manager:
          python:
          - name: cloudify-rest-service
            path: rest-service
            dependencies:
            - cloudify-dsl-parser
            - flask-securest
          - name: cloudify-workflows
            path: workflows
            dependencies:
            - cloudify-plugins-common
          - name: cloudify-riemann-controller-plugin
            path: plugins/riemann-controller
            dependencies:
            - cloudify-plugins-common
          - name: cloudify-integration-tests
            path: tests
            dependencies:
            - cloudify-plugins-common
            - cloudify-rest-client
            - cloudify-script-plugin
            - cloudify-diamond-plugin
            - cloudify-dsl-parser
            - cloudify-rest-service
        cloudify-cli:
          python:
            name: cloudify
            node_template_base_name: cloudify-cli
            dependencies:
            - cloudify-dsl-parser
            - cloudify-rest-client
            - cloudify-plugins-common
            - cloudify-script-plugin
        cloudify-agent:
          python:
            dependencies:
            - cloudify-plugins-common
            - cloudify-script-plugin
            - cloudify-diamond-plugin
        cloudify-system-tests:
          python:
            dependencies:
            - cloudify-cli
        cloudify-packager:
          python: false
        cloudify-hello-world-example:
          python: false
        cloudify-nodecellar-example:
          python: false
        cloudify-manager-blueprints:
          python: false
        cloudify-plugin-template:
          python: false
      plugin:
        cloudify-script-plugin: {}
        cloudify-diamond-plugin: {}
        cloudify-docker-plugin: {}
        cloudify-chef-plugin: {}
        cloudify-puppet-plugin: {}
        cloudify-fabric-plugin: {}
        cloudify-openstack-plugin: {}
        cloudify-aws-plugin: {}
      misc:
        flask-securest: {}
        docs.getcloudify.org:
          python: false
        docs.getcloudify.org-site:
          python: false
        cloudify-agent-packager:
          python:
            dependencies:
            - cloudify-agent
        claw:
          properties:
            organization: dankilman
          python:
            dependencies:
            - cloudify-system-tests
        claw-scripts:
          properties:
            organization: dankilman
          python: false
  virtualenv_name:
    description: The virtualenv name to pass to mkvirtualenv
    default: cloudify
  repos_dir:
    description: directory to contain all closed repositories
  clone_method:
    description: clone github repos using ssh or https.
    default: https
  branches_dir:
    description: directory that contains branches yaml files for 'git checkout'
  virtualenvwrapper_path:
    description: >
      path to virtualenvwrapper script to be sourced before creating
      the virtualenv
    default: virtualenvwrapper.sh
  register_python_argcomplete:
    description: >
      names to register with python arg-complete when on virtualenv
      postactivate.
    default:
    - cfy
    - claw
    - clue
  requirements:
    description: requirements to install in virtualenv
    default:
    - tox
    - testtools
    - flake8
    - nose
    - nose-cov
    - mock==1.0.1
    - unittest2
  constraints:
    description: constraints for all pip install commands
    default:
    - requests==2.7.0
    - Flask-RESTful==0.2.5
    - jinja2==2.7.2
    - six>=1.9.0
    - pywinrm==0.0.3
    - elasticsearch==1.6.0
    - virtualenv>=13.1.2
  git_config:
    description: git config to apply to all repos
    default: {}

node_types:

  directory:
    derived_from: cloudify.nodes.Root
    properties:
      location:
        description: a directory node
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: self.operations.operations.makedirs
          inputs:
            location:
              default: { get_property: [SELF, location] }

  git_repo:
    derived_from: cloudify.nodes.Root
    properties:
      name:
        description: the repo name
      organization:
        description: the github organization
        default: cloudify-cosmo
      clone_method:
        description: clone with https or ssh
        default: { get_input: clone_method }
      branch:
        description: the repo branch
        default: master
      branches_dir:
        description: directory with branches yaml files
        default: { get_input: branches_dir }
      location:
        default: { get_input: repos_dir }
      repo_type:
        description: >
          One of: core, plugin, misc. Used by git checkout to figure out
          build branch names.
      git_config:
        default: { get_input: git_config }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: self.operations.git.clone
          inputs:
            location:
              default: { get_property: [SELF, location] }
            organization:
              default: { get_property: [SELF, organization] }
            repo:
              default: { get_property: [SELF, name] }
            branch:
              default: { get_property: [SELF, branch] }
            clone_method:
              default: { get_property: [SELF, clone_method] }
        configure:
          implementation: self.operations.git.configure
          inputs:
            commit_msg_resource_path:
              default: resources/commit-msg
            git_config:
              default: { get_property: [SELF, git_config] }
      git:
        pull:
          implementation: self.operations.git.pull
          inputs: {}
        status:
          implementation: self.operations.git.status
          inputs: {}
        checkout:
          implementation: self.operations.git.checkout
          inputs:
            repo_type:
              default: { get_property: [SELF, repo_type ] }
            branch:
              default: ''
              description: |
                Which branch to checkout out, if starts with a dot (.), it will be
                treated as a core/plugin checkout and a version prefix will be attached
                according to the repo_type.
                A path to a yaml mapping file can also be supplied, in which
                case only if there is a mapping for the specified repo,
                the path can also be relative to branches dir.
        diff:
          implementation: self.operations.git.diff
          inputs:
            repo_type:
              default: { get_property: [SELF, repo_type] }
            revision_range:
              default: ''

  virtualenv:
    derived_from: cloudify.nodes.Root
    properties:
      name:
        description: the virtualenv name
        default: env
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          executor: central_deployment_agent
          implementation: operations/virtualenv.sh
          inputs:
            process:
              default:
                env:
                  operation: mkvirtualenv
                  virtualenvwrapper_path: { get_input: virtualenvwrapper_path }
                  virtualenv_name: { get_property: [SELF, name] }

  python_package:
    derived_from: cloudify.nodes.Root
    properties:
      name:
        description: the python package name
      path:
        description: >
          path to package relative to the repo it depends on
        default: ''
      test:
        description: >
          path to root test package relative to [SELF, path]
        default: ''
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: self.operations.pip.add_self_requirement
          inputs:
            package_path:
              default: { get_attribute: [SELF, package_path] }
      pip:
        install:
          implementation: self.operations.pip.install
          inputs:
            virtualenv_location:
              default: { get_attribute: [SELF, virtualenv_location] }
            package_path:
              default: { get_attribute: [SELF, package_path] }
      nose:
        run:
          implementation: self.operations.operations.nose_run
          inputs:
            virtualenv_location:
              default: { get_attribute: [SELF, virtualenv_location] }
            test_path:
              default: { concat: [{ get_attribute: [SELF, package_path] }, '/',
                                  { get_property: [SELF, test] }] }

  requirements:
    derived_from: cloudify.nodes.Root
    properties:
      requirements:
        description: requirements that should get installed
        default: []
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: self.operations.pip.add_requirements
          inputs:
            requirements:
              default: { get_property: [SELF, requirements] }

  package_installer:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: self.operations.pip.install_packages
          inputs: {}

relationships:

  package_depends_on_repo:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: self.operations.pip.configure_python_package_path
          inputs:
            repo_location:
              default: { get_attribute: [TARGET, repo_location] }
            base_package_path:
              default: { get_property: [SOURCE, path] }

  package_depends_on_virtualenv:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: self.operations.pip.configure_virtualenv_location
          inputs:
            virtualenv_location:
              default: { get_attribute: [TARGET, virtualenv_location] }

  package_depends_on_package:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: self.operations.pip.configure_package_dependency
          inputs:
            target_package_path:
              default: { get_attribute: [TARGET, package_path] }

  docs_site_depends_on_docs:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        postconfigure:
          implementation: self.operations.operations.configure_docs_getcloudify_source
          inputs:
            docs_getcloudify_repo_location:
              default: { get_attribute: [TARGET, repo_location] }

node_templates:

  repos_dir:
    type: directory
    properties:
      location: { get_input: repos_dir }

  virtualenv:
    type: virtualenv
    properties:
      name: { get_input: virtualenv_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: self.operations.pip.configure_virtualenv
          inputs:
            constraints: { get_input: constraints }
            postactivate_resource_path: resources/postactivate
            git_retag_cloudify_resource_path: resources/git-retag-cloudify
            repositories_dir: { get_property: [repos_dir, location] }
            virtualenv_location: { get_attribute: [SELF, virtualenv_location] }
            register_python_argcomplete: { get_input: register_python_argcomplete }
    relationships:
      - target: repos_dir
        type: cloudify.relationships.depends_on

  requirements:
    type: requirements
    properties:
      requirements: { get_input: requirements }
    relationships:
      - target: virtualenv
        type: package_depends_on_virtualenv

  pre_package_installer:
    type: package_installer
    relationships:
      - target: requirements
        type: cloudify.relationships.depends_on
      - target: virtualenv
        type: cloudify.relationships.depends_on

  package_installer:
    type: package_installer
    relationships:
      - target: pre_package_installer
        type: cloudify.relationships.depends_on

plugins:
  self:
    executor: central_deployment_agent
    install: false

outputs:
  repositories:
    value: { get_property: [repos_dir, location] }
  virtualenv:
    value: { get_attribute: [virtualenv, virtualenv_location] }
